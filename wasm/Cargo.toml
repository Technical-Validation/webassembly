[package]
name = "my_wasm_template"
version = "0.1.0"
authors = ["Roxi <nanwey@163.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2.100"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

serde = { version = "1.0.219", features = ["derive"] }
serde-wasm-bindgen = "0.6.5"
serde_json = "1.0.143"
getrandom = { version = "0.2.16", features = ["js"] }
base64 = "0.22.1"
aes-gcm = "0.10.3"
# Hybrid encryption dependencies: RSA (PKCS#8), SHA-256, and rand
rsa = { version = "0.9.8", default-features = false, features = ["pem"] }
sha2 = "0.10.8"
rand = "0.8.5"
js-sys = "0.3.77"
web-sys = { version = "0.3.77", features = ["Window"] }

[dev-dependencies]
wasm-bindgen-test = "0.3.50"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
